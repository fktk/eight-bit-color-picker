#!/usr/bin/env node
// vim: ft=javascript

/*!
 * Simple HTTP server to serve assets and make it easy to try out the example.
 *
 * This is a tad fancy with the time measuring and colored output only because
 * the author likes pretty outputs to stdout.
 */

/**
 * Module dependencies
 */
var http = require('http')
  , path = require('path')
  , fs   = require('fs')

/**
 * Default to port 3050 if no environment variable is set
 */
var port = process.env.port || 3000

/**
 * Setup HTTP server to serve the index in examples, as well as the css and js
 * assets in this library.
 */
http.createServer(function(req, res) {
  'use strict';

  /**
   * Profile execution by recording start time
   */
  var start = process.hrtime()

  /**
   * Just send a 200 and return for favicon requests
   */
  if (req.url === '/favicon.ico') {
    res.writeHead(200, {'Content-Type': 'image/x-icon'})
    return res.end()
  }

  /**
   * Decide which file to serve based on req.url. Any requests for js or css
   * assets will route to lib/eight-bit-color-picker.{js|css} for the sake of
   * simplicity.
   */
  var file = __dirname + '/index.html'
    , type = 'text/html'
  if (/.+\.js/.test(req.url)) {
    file = __dirname + '/../lib/eight-bit-color-picker.js'
    type = 'text/javascript'
  } else if (/.+\.css/.test(req.url)) {
    file = __dirname + '/../lib/eight-bit-color-picker.css'
    type = 'text/css'
  }
  file = path.resolve(file)

  /**
   * Read file from the filesystem and send its contents over in the response
   */
  fs.readFile(file, function(err, data) {

    /**
     * This error should never happen, but just in case...
     */
    if (err) {
      res.writeHeader(404, {'Content-Type': 'text/json'})
      res.write(JSON.stringify(err))
      console.error('You should never see this. Please file a bug report.')
      console.error('Include this stacktrace: ',  err.stack)
      return res.end()
    }

    /**
     * Send response and log request and execution time to stdout
     */
    res.writeHeader(200, {'Content-Type': type})
    res.write(data)
    var time = process.hrtime(start)
    console.log(
      'GET /'.concat(path.basename(file), ' \x1B[32m200\x1B[39m %dms'),
      ((time[0] * 1e9 + time[1]) / 1000000).toFixed(2)
    )
    res.end()
  })

}).listen(port)
console.log('Listening on port: ' + port)
